#! /usr/bin/env python

import argparse
import logging
import os
import shutil
import sys

import tagterm


log = tagterm.get_logger(__name__)


def convert(args):
    converter = tagterm.Converter(
        args.input, path_out=args.output, debug=args.verbose,
        permissive=args.permissive
    )
    converter.load()
    converter.convert()
    converter.save()
    print(converter.path_out)


def include(args):
    for path in args.path:
        src = os.path.abspath(path)
        dest = os.path.join(
            tagterm.PROJECT,
            os.path.basename(src)
        )
        if all(map(os.path.exists, [src])):
            log.info("Copy %s to %s", src, dest)
            shutil.copytree(src, dest)
        else:
            raise Exception("Invalid path(s)")


def remove(args):
    remover = tagterm.Remover(
        args.input, path_out=args.output, debug=args.verbose
    )
    remover.load()
    remover.remove()
    remover.save()
    print(remover.path_out)


def validate(args):
    validator = tagterm.Validator(
        args.input, debug=args.verbose, permissive=args.permissive)
    validator.load()
    validator.validate()


def main():
    tparser = argparse.ArgumentParser(
        description="Remove tags from valid xhtml file.")
    tparser.add_argument(
        "-v", "--verbose", action="store_true",
        help="show debugging messages"
    )
    subtparser = tparser.add_subparsers(title="commands")

    common_read = argparse.ArgumentParser(add_help=False)
    common_read.add_argument(
        "-i", "--input", metavar="FILE",
        help="input file path"
    )
    common_write = argparse.ArgumentParser(add_help=False,
                                           parents=[common_read])
    common_write.add_argument(
        "-o", "--output", metavar="PATH",
        help="output directory path"
    )
    common_validate = argparse.ArgumentParser(add_help=False)
    common_validate.add_argument(
        "-p", "--permissive", action="count",
        help="ignore html tidy warnings (use -pp for skipping errors too)"
    )

    convert_parser = subtparser.add_parser(
        "convert",
        help="convert a HTML file to a XHTML one",
        parents=[common_write, common_validate]
    )
    convert_parser.set_defaults(func=convert)

    include_parser = subtparser.add_parser(
        "include",
        help="include external dirs/files to the installed project directory",
    )
    include_parser.add_argument(
        "path", metavar="PATH", nargs="+",
        help="path to file or directory that you want to copy"
    )
    include_parser.set_defaults(func=include)

    remove_parser = subtparser.add_parser(
        "remove",
        help="remove tags from a XHTML valid file and create XML from it",
        parents=[common_write]
    )
    remove_parser.set_defaults(func=remove)

    validate_parser = subtparser.add_parser(
        "validate",
        help="check if an input file is a HTML valid file",
        parents=[common_read, common_validate]
    )
    validate_parser.set_defaults(func=validate)

    args = tparser.parse_args()
    level = logging.DEBUG if args.verbose else logging.INFO
    log.setLevel(level)
    try:
        args.func(args)
    except Exception as exc:
        log.error(exc)
    else:
        exc = None
        log.info("Operation completed successfully")
    return tagterm.get_return_code(exc)


if __name__ == "__main__":
    rcode = main()
    log.debug("Exiting with code %d", rcode)
    sys.exit(rcode)
